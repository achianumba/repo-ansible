# {{ repo_managed }}
# These settings are synced to GitHub by https://probot.github.io/apps/settings/
# See https://docs.github.com/en/rest/reference/repos#update-a-repository for all available settings.

repository:

  # The name of the repository. Changing this will rename the repository
  name:  {{ repo.name }}

  # A short description of the repository that will show up on GitHub
  description: "{{ repo.description }}"

{% if repo.archived %}
  archived: true
{% endif %}

{% if repo.website is defined %}
  # A URL with more information about the repository
  homepage: {{ repo.website }}
{% endif %}

{% if repo.github.topics is defined %}
  # A comma-separated list of topics to set on the repository
  topics: {{ repo.github.topics|to_json }}
{% endif %}

  # Either `true` to make the repository private, or `false` to make it public.
  private: {{ 'true' if repo.visibility == 'private' else 'false' }}

  has_issues: {{ 'true' if repo.github.features.issues else 'false' }}

  # Either `true` to enable projects for this repository, or `false` to disable them.
  # If projects are disabled for the organization, passing `true` will cause an API error.
  has_projects: {{ 'true' if repo.github.features.projects else 'false' }}

  has_wiki: {{ 'true' if repo.github.features.wiki else 'false' }}

  # Either `true` to enable downloads for this repository, `false` to disable them.
  has_downloads: {{ 'true' if repo.github.features.downloads else 'false' }}

  # Updates the default branch for this repository.
  default_branch: {{ repo.github.default_branch }}

  # Either `true` to allow squash-merging pull requests, or `false` to prevent
  # squash-merging.
  allow_squash_merge: {{ 'true' if repo.github.features.squash_merge else 'false' }}

  # Either `true` to allow merging pull requests with a merge commit, or `false`
  # to prevent merging pull requests with merge commits.
  allow_merge_commit: {{ 'true' if repo.github.features.merge_commit else 'false' }}

  # Either `true` to allow rebase-merging pull requests, or `false` to prevent
  # rebase-merging.
  allow_rebase_merge: {{ 'true' if repo.github.features.rebase_merge else 'false' }}

  # Either `true` to enable automatic deletion of branches on merge, or `false` to disable
  delete_branch_on_merge: true

  # Either `true` to enable automated security fixes, or `false` to disable
  # automated security fixes.
  enable_automated_security_fixes: true

  # Either `true` to enable vulnerability alerts, or `false` to disable
  # vulnerability alerts.
  enable_vulnerability_alerts: true

# Labels: define labels for Issues and Pull Requests
labels:
  - name: feat
    description: non-breaking change which adds new functionality
    color: "1D76DB"  # Blue for features (enhancements)

  - name: fix
    description: non-breaking change which fixes a bug or an issue
    color: "D73A4A"  # Red for fixes (issues, bugs)

  - name: chore(deps)
    description: changes to dependencies
    color: "C2E0C6"  # Light green for dependency updates

  - name: test
    description: adds or modifies a test
    color: "E99695"  # Light red/pink for test updates

  - name: docs
    description: creates or updates documentation
    color: "0075CA"  # Bright blue for documentation changes

  - name: style
    description: changes that do not affect the meaning or function of code (e.g. formatting, whitespace, missing semi-colons etc.)
    color: "6E5494"  # Purple for styling (formatting)

  - name: perf
    description: code change that improves performance
    color: "FFC107"  # Yellow for performance improvements

  - name: revert
    description: reverts a commit
    color: "000000"  # Black for revert actions

  - name: refactor
    description: code change that neither fix a bug nor add a new feature
    color: "F9D0C4"  # Peach/light red for refactoring

  - name: ci
    description: changes to continuous integration or continuous delivery scripts or configuration files
    color: "A2EEEF"  # Light blue for CI/CD updates

  - name: chore
    description: general tasks or anything that doesn't fit the other commit types
    color: "BFDADC"  # Muted teal for general chores

  - name: "BREAKING CHANGE"
    description: fix or feature that would cause existing functionality to not work as expected
    color: "FF0000"  # Bright red for breaking changes (critical)

# Milestones: define milestones for Issues and Pull Requests
{#
milestones:
  - title: milestone-title
    description: milestone-description
    # The state of the milestone. Either `open` or `closed`
    state: open
#}
{#
# Collaborators: give specific users access to this repository.
# See https://docs.github.com/en/rest/reference/repos#add-a-repository-collaborator for available options
collaborators:
  # - username: bkeepers
  #   permission: push
  # - username: hubot
  #   permission: pull

  # Note: `permission` is only valid on organization-owned repositories.
  # The permission to grant the collaborator. Can be one of:
  # * `pull` - can pull, but not push to or administer this repository.
  # * `push` - can pull and push, but not administer this repository.
  # * `admin` - can pull, push and administer this repository.
  # * `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
  # * `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.

# See https://docs.github.com/en/rest/reference/teams#add-or-update-team-repository-permissions for available options
teams:
  - name: core
    # The permission to grant the team. Can be one of:
    # * `pull` - can pull, but not push to or administer this repository.
    # * `push` - can pull and push, but not administer this repository.
    # * `admin` - can pull, push and administer this repository.
    # * `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
    # * `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
    permission: admin
  - name: docs
    permission: push

branches:
  - name: master
    # https://docs.github.com/en/rest/reference/repos#update-branch-protection
    # Branch Protection settings. Set to null to disable
    protection:
      # Required. Require at least one approving review on a pull request, before merging. Set to null to disable.
      required_pull_request_reviews:
        # The number of approvals required. (1-6)
        required_approving_review_count: 1
        # Dismiss approved reviews automatically when a new commit is pushed.
        dismiss_stale_reviews: true
        # Blocks merge until code owners have reviewed.
        require_code_owner_reviews: true
        # Specify which users and teams can dismiss pull request reviews. Pass an empty dismissal_restrictions object to disable. User and team dismissal_restrictions are only available for organization-owned repositories. Omit this parameter for personal repositories.
        dismissal_restrictions:
          users: []
          teams: []
      # Required. Require status checks to pass before merging. Set to null to disable
      required_status_checks:
        # Required. Require branches to be up to date before merging.
        strict: true
        # Required. The list of status checks to require in order to merge into this branch
        contexts: []
      # Required. Enforce all configured restrictions for administrators. Set to true to enforce required status checks for repository administrators. Set to null to disable.
      enforce_admins: true
      # Prevent merge commits from being pushed to matching branches
      required_linear_history: true
      # Required. Restrict who can push to this branch. Team and user restrictions are only available for organization-owned repositories. Set to null to disable.
      restrictions:
        apps: []
        users: []
        teams: []
#}
